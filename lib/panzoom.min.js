
/*! Minimal pan-zoom (pointer events) */
(function(global){
  function PanZoom(el, opts){
    this.el = el;
    this.opts = opts || {};
    this.scale = 1;
    this.minScale = this.opts.minScale || 1;
    this.maxScale = this.opts.maxScale || 5;
    this.x = 0;
    this.y = 0;
    this.pointers = new Map();
    this.lastDist = 0;
    this._bind();
    this._update();
  }
  PanZoom.prototype._bind = function(){
    const el = this.el;
    el.style.touchAction = 'none';
    el.addEventListener('pointerdown', this._onDown.bind(this));
    el.addEventListener('pointermove', this._onMove.bind(this));
    window.addEventListener('pointerup', this._onUp.bind(this));
    el.addEventListener('wheel', this._onWheel.bind(this), {passive:false});
  }
  PanZoom.prototype._onDown = function(e){
    this.el.setPointerCapture(e.pointerId);
    this.pointers.set(e.pointerId, {x:e.clientX, y:e.clientY});
    this.startX = this.x; this.startY = this.y;
    this.startScale = this.scale;
    this.startClientX = e.clientX; this.startClientY = e.clientY;
  }
  PanZoom.prototype._onMove = function(e){
    if(!this.pointers.has(e.pointerId)) return;
    this.pointers.set(e.pointerId, {x:e.clientX, y:e.clientY});
    if(this.pointers.size===1){
      const dx = e.clientX - this.startClientX;
      const dy = e.clientY - this.startClientY;
      this.x = this.startX + dx;
      this.y = this.startY + dy;
      this._update();
    } else if(this.pointers.size===2){
      const pts = Array.from(this.pointers.values());
      const dx = pts[0].x - pts[1].x;
      const dy = pts[0].y - pts[1].y;
      const dist = Math.hypot(dx, dy);
      if(this.lastDist===0) this.lastDist=dist;
      const factor = dist / this.lastDist;
      this.scale = Math.min(this.maxScale, Math.max(this.minScale, this.scale * factor));
      this.lastDist = dist;
      this._update();
    }
  }
  PanZoom.prototype._onUp = function(e){
    if(this.pointers.has(e.pointerId)) this.pointers.delete(e.pointerId);
    if(this.pointers.size<2) this.lastDist=0;
  }
  PanZoom.prototype._onWheel = function(e){
    e.preventDefault();
    const delta = Math.sign(e.deltaY);
    const factor = (delta<0) ? 1.1 : 0.9;
    this.scale = Math.min(this.maxScale, Math.max(this.minScale, this.scale * factor));
    this._update();
  }
  PanZoom.prototype._update = function(){
    this.el.style.transform = `translate(${this.x}px, ${this.y}px) scale(${this.scale})`;
  }
  global.PanZoom = PanZoom;
})(window);
